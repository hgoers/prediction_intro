{
  "hash": "41b82c3ad39c44a6f9cccf6c5352d349",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  warning: false\n---\n\n# Time Series Regression Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(Lahman)\nlibrary(tsibble)\nlibrary(fable)\nlibrary(broom)\n```\n:::\n\n\nNow that we have a good understanding of our time series, we want to start modelling relationships within it. What, in the past, has made our outcomes of interest rise and fall? Once we can answer that question, we can begin to try to predict the future. \n\nThis chapter introduces time series regression models. \n\n## Linear regression models\n\nTo begin, we will focus on linear regression models. These models assume that the predicted effect of a change in our predictor on the outcome is the same no matter the value of the predictor. For example, we assume that a country's GDP will grow at the same rate across all years. \n\nThis is a stringent assumption, but there are many cases where it is appropriate. If you are lucky enough to be modelling something with a linear relationship, you get to use a model that is intuative and (relatively) easy to interpret. The upside is large. \n\nLet's introduce this model with one such example of a linear relationship. We are going to look at the relationship between baseball teams' winning percentage and their run differential. \n\nA team's winning percentage is simply the proportion of games that win. For example, if a team wins six of the 10 games they have played, their winning percentage is 60 percent. Their run differential is the difference between the number of runs they score and concede. So if a team makes 12 runs but their opponent scores 16, their run differential will be -4. \n\nLet's take a look at this relationship across all teams' seasons from 2000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTeams |> \n  filter(yearID >= 2000) |> \n  transmute(yearID, teamID, RD = R - RA, WPct = W / G) |> \n  as_tsibble(index = yearID, key = teamID) |> \n  ggplot(aes(x = RD, y = WPct)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05_time_series_forecasts_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThat's a strong positive relationship. Teams with a high run differential tended to win most of their games. Teams with a low differential tended to lose. In general, this relationship looks linear: I could draw a straight line through those dots and capture the general trend within them very well. \n\nSo, we're going to assume the relationship is linear and we can, therefore, model it using linear regression. To do this, we are going to focus on one team: my sweet, beleaguered Nats. Let's look at their performance since entering the league in their current form in 2005: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnats_ts <- Teams |> \n  filter(name == \"Washington Nationals\", yearID >= 2005) |> \n  transmute(yearID, RD = R - RA, WPct = W / G) |> \n  as_tsibble(index = yearID)\n\nautoplot(nats_ts, WPct)\n```\n\n::: {.cell-output-display}\n![](05_time_series_forecasts_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAfter a slow start, they entered the glory years. These years culminated in the Nats winning the World Series in 2019. We made [Screech](https://www.mlb.com/nationals/ballpark/entertainment/screech) so proud! After that, we took a downfall. I don't even want to talk about this season. It's a good thing it's not in the data set. \n\nSo, do the Nats follow the general trend of tending to win lots of games in seasons in which they scored high run differentials? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(nats_ts, aes(x = RD, y = WPct)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05_time_series_forecasts_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIt looks to be the case. We tended to win a high proportion of our games in the seasons in which we scored high run differentials. Conversely, we tended to win a low proportion of our games in the seasons we scored low run differentials.\n\nWe can model that using linear least squares regression: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnats_m <- model(nats_ts, TSLM(WPct ~ RD))\n\nreport(nats_m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: WPct \nModel: TSLM \n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.054879 -0.015794  0.005792  0.020122  0.034770 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 4.932e-01  6.037e-03   81.68  < 2e-16 ***\nRD          6.183e-04  4.785e-05   12.92 1.52e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02661 on 18 degrees of freedom\nMultiple R-squared: 0.9027,\tAdjusted R-squared: 0.8973\nF-statistic:   167 on 1 and 18 DF, p-value: 1.5174e-10\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=TRUE}\nNote, this is equivalent to running: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(WPct ~ RD, data = nats_ts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = WPct ~ RD, data = nats_ts)\n\nCoefficients:\n(Intercept)           RD  \n  0.4931591    0.0006183  \n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintercept_coef <- tidy(nats_m) |> \n  filter(term == \"(Intercept)\") |> \n  pull(estimate)\n\nRD_coef <- tidy(nats_m) |> \n  filter(term == \"RD\") |> \n  pull(estimate)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(nats_ts, aes(x = RD, y = WPct)) + \n  geom_point() + \n  geom_line(aes(y = augment(nats_m)$.fitted)) + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05_time_series_forecasts_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe can take advantage of `broom::augment()` to calculate the predicted winning percentage for each given run differential, and how far that predicted value is from what we observed. \n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(nats_m) |> \n  select(yearID, WPct, .fitted, .resid) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| yearID|      WPct|   .fitted|     .resid|\n|------:|---------:|---------:|----------:|\n|   2005| 0.5000000| 0.4721360|  0.0278640|\n|   2006| 0.4382716| 0.4152499|  0.0230217|\n|   2007| 0.4506173| 0.4251431|  0.0254742|\n|   2008| 0.3664596| 0.3793869| -0.0129273|\n|   2009| 0.3641975| 0.3917534| -0.0275559|\n|   2010| 0.4259259| 0.4393646| -0.0134387|\n|   2011| 0.4968944| 0.4814109|  0.0154835|\n|   2012| 0.6049383| 0.5778699|  0.0270683|\n|   2013| 0.5308642| 0.5117089|  0.0191553|\n|   2014| 0.5925926| 0.5741600|  0.0184326|\n|   2015| 0.5123457| 0.5352054| -0.0228597|\n|   2016| 0.5864198| 0.5865265| -0.0001068|\n|   2017| 0.5987654| 0.5840532|  0.0147122|\n|   2018| 0.5061728| 0.5481902| -0.0420174|\n|   2019| 0.5740741| 0.5852899| -0.0112158|\n|   2020| 0.4333333| 0.4882125| -0.0548792|\n|   2021| 0.4012346| 0.4337997| -0.0325651|\n|   2022| 0.3395062| 0.3373406|  0.0021655|\n|   2023| 0.4382716| 0.4035017|  0.0347699|\n|   2024| 0.4382716| 0.4288531|  0.0094185|\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(nats_m) |> \n  ggplot(aes(x = yearID)) +\n  geom_line(aes(y = WPct), colour = \"lightgrey\") + \n  geom_line(aes(y = .fitted), colour = \"darkred\") + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05_time_series_forecasts_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n",
    "supporting": [
      "05_time_series_forecasts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}